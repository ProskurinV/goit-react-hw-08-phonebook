{"version":3,"file":"static/js/41.5ade7e1f.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Contact/Contact.js","components/ContactList/ContactList.js","components/ContactEditor/ContactEditor.js","components/Filter/Filter.js","pages/ContactsPage.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import { DeleteIcon } from '@chakra-ui/icons';\n// import Notiflix from 'notiflix';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport { Card, Text, CardBody, Button } from '@chakra-ui/react';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <Card>\n      <CardBody>\n        <Text>\n          {name} : {number}\n        </Text>\n        <Button colorScheme=\"blue\" type=\"button\" onClick={handleDelete}>\n          <DeleteIcon w={5} h={5} />\n        </Button>\n      </CardBody>\n    </Card>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { Contact } from 'components/Contact/Contact';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { Flex } from '@chakra-ui/react';\n\nexport default function ContactList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = () => {\n    const normFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name?.toLowerCase()?.includes(normFilter)\n    );\n  };\n  const visibleContacts = filteredContacts();\n\n  return (\n    <ul>\n      <Flex\n        justifyContent=\"center\"\n        gap=\"10px\"\n        wrap=\"wrap\"\n        backgroundColor=\"#F7FAFC\"\n      >\n        {visibleContacts.map(({ id, name, number }) => (\n          <li key={id}>\n            <Contact id={id} name={name} number={number} />\n          </li>\n        ))}\n      </Flex>\n    </ul>\n  );\n}\n","import { Field, Formik } from 'formik';\nimport * as yup from 'yup';\n\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\n\nimport toast, { Toaster } from 'react-hot-toast';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\n\nlet schema = yup.object().shape({\n  name: yup.string().required('Please, enter name'),\n  number: yup.string().min(7).required('Please, enter correct number'),\n});\n\nexport function ContactEditor() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box bg=\"white\" p={6} rounded=\"md\" w={64}>\n        <Formik\n          initialValues={{\n            name: '',\n            number: '',\n          }}\n          validationSchema={schema}\n          onSubmit={values => {\n            const findDuplicateName = (contact, newName) => {\n              return contacts.find(\n                ({ name }) => name.toLowerCase() === newName\n              );\n            };\n            const { name } = values;\n            const nameToRegistr = name.toLowerCase();\n            if (findDuplicateName(contacts.items, nameToRegistr)) {\n              toast(`${name} is already in your contacts`);\n              return;\n            }\n\n            dispatch(addContact(values));\n            toast.success(`${name} has been added to your contacts`);\n          }}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"name\">Name</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"name\"\n                    variant=\"filled\"\n                    placeholder=\"Enter name\"\n                  />\n                </FormControl>\n                <FormControl\n                  isRequired\n                  isInvalid={!!errors.number && touched.number}\n                >\n                  <FormLabel htmlFor=\"number\">Number</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"number\"\n                    name=\"number\"\n                    type=\"number\"\n                    placeholder=\"Enter phone\"\n                    variant=\"filled\"\n                  />\n                  <FormErrorMessage>{errors.number}</FormErrorMessage>\n                </FormControl>\n\n                <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                  Add contact\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n      <Toaster position=\"top-right\" />\n    </Flex>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Input } from '@chakra-ui/react';\nimport { Heading, Flex } from '@chakra-ui/react';\n\nexport function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onFilterChange = event => {\n    dispatch(updateFilter(event.currentTarget.value));\n  };\n  return (\n    <>\n      <Flex justifyContent=\"center\">\n        <Heading as=\"h2\" size=\"l\">\n          Find contacts\n        </Heading>\n      </Flex>\n      <Flex justifyContent=\"center\" paddingBottom=\"8px\" paddingTop=\"8px\">\n        <Input\n          width=\"auto\"\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Enter search name\"\n          value={filter}\n          onChange={onFilterChange}\n        />\n      </Flex>\n    </>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { ContactEditor } from '../components/ContactEditor/ContactEditor';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectIsLoading,\n  selectError,\n  selectContacts,\n} from 'redux/contacts/selectors';\nimport ContactList from 'components/ContactList';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\n\nimport { Filter } from 'components/Filter/Filter';\n\nimport { CircularProgress } from '@chakra-ui/react';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactEditor />\n\n      {contacts.length > 0 && (\n        <>\n          {/* <Flex justifyContent=\"center\">\n            <Heading>Your Contacts</Heading>\n          </Flex> */}\n\n          <Filter />\n        </>\n      )}\n      <div>\n        {isLoading && (\n          <CircularProgress isIndeterminate color=\"green.300\" size=\"30px\" />\n        )}\n      </div>\n      <ContactList />\n      {error}\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","Contact","id","name","number","dispatch","useDispatch","colorScheme","type","onClick","deleteContact","w","h","ContactList","useSelector","visibleContacts","normFilter","toLowerCase","contact","includes","filteredContacts","justifyContent","gap","wrap","backgroundColor","map","schema","yup","shape","required","min","ContactEditor","bg","align","justify","p","rounded","initialValues","validationSchema","onSubmit","values","newName","nameToRegistr","find","toast","addContact","handleSubmit","errors","touched","spacing","isRequired","htmlFor","as","Input","variant","placeholder","isInvalid","width","position","Filter","size","paddingBottom","paddingTop","value","onChange","event","updateFilter","currentTarget","ContactsPage","useEffect","fetchContacts","length","isIndeterminate","color"],"sourceRoot":""}