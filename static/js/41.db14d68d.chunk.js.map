{"version":3,"file":"static/js/41.db14d68d.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Contact/Contact.js","components/ContactList/ContactList.js","components/ContactEditor/ContactEditor.js","components/Filter/Filter.js","pages/ContactsPage.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import { DeleteIcon } from '@chakra-ui/icons';\n// import Notiflix from 'notiflix';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport { Card, Text, CardBody, Button } from '@chakra-ui/react';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <Card>\n      <CardBody>\n        <Text>\n          {name} : {number}\n        </Text>\n        <Button colorScheme=\"blue\" type=\"button\" onClick={handleDelete}>\n          <DeleteIcon w={5} h={5} />\n        </Button>\n      </CardBody>\n    </Card>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { Contact } from 'components/Contact/Contact';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { Flex } from '@chakra-ui/react';\n\nexport default function ContactList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = () => {\n    const normFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name?.toLowerCase()?.includes(normFilter)\n    );\n  };\n  const visibleContacts = filteredContacts();\n\n  return (\n    <ul>\n      <Flex justifyContent=\"center\" gap=\"10px\" wrap=\"wrap\">\n        {visibleContacts.map(({ id, name, number }) => (\n          <li key={id}>\n            <Contact id={id} name={name} number={number} />\n          </li>\n        ))}\n      </Flex>\n    </ul>\n  );\n}\n","import { Field, Formik } from 'formik';\n\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\n\nexport function ContactEditor() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"85vh\">\n      <Box bg=\"white\" p={6} rounded=\"md\" w={64}>\n        <Formik\n          initialValues={{\n            name: '',\n            number: '',\n          }}\n          onSubmit={(values, { resetForm }) => {\n            const findDuplicateName = (contact, newName) => {\n              return contacts.find(\n                ({ name }) => name.toLowerCase() === newName\n              );\n            };\n            const { name } = values;\n            const nameToRegistr = name.toLowerCase();\n            if (findDuplicateName(contacts.items, nameToRegistr)) {\n              Notiflix.Notify.info(`${name} is already in your contacts`);\n              return;\n            }\n\n            dispatch(addContact(values));\n            Notiflix.Notify.info(`${name} has been added to your contacts`);\n            resetForm();\n          }}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"name\">Name</FormLabel>\n\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"name\"\n                    variant=\"filled\"\n                    placeholder=\"Enter name\"\n                  />\n                </FormControl>\n                <FormControl\n                  isRequired\n                  isInvalid={!!errors.number && touched.number}\n                >\n                  <FormLabel htmlFor=\"number\">Number</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"number\"\n                    name=\"number\"\n                    type=\"number\"\n                    placeholder=\"Enter phone\"\n                    variant=\"filled\"\n                  />\n                  <FormErrorMessage>{errors.number}</FormErrorMessage>\n                </FormControl>\n\n                <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                  Add contact\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n}\n// /////////////\n// import { useFormik } from 'formik';\n// import { addContact } from 'redux/contacts/operations';\n// import { selectContacts } from 'redux/contacts/selectors';\n// import * as yup from 'yup';\n// import Notiflix from 'notiflix';\n// import { Formik, Field } from 'formik';\n\n// import { useDispatch, useSelector } from 'react-redux';\n// import {\n//   Box,\n//   Button,\n//   Flex,\n//   FormControl,\n//   FormLabel,\n//   Input,\n//   VStack,\n// } from '@chakra-ui/react';\n\n// let schema = yup.object().shape({\n//   name: yup.string().required('Please, enter name'),\n//   number: yup.string().min(7).required('Please, enter correct number'),\n// });\n\n// export function ContactEditor() {\n//   // const [input, setInput] = useState('');\n//   // const handleInputChange = e => setInput(e.target.value);\n//   // const isError = input === '';\n\n//   const dispatch = useDispatch();\n//   const contacts = useSelector(selectContacts);\n//   const formik = useFormik({\n//     initialValues: {\n//       name: '',\n//       number: '',\n//     },\n//     onSubmit: (values, { resetForm }) => {\n//       const findDuplicateName = (contact, newName) => {\n//         return contacts.find(({ name }) => name.toLowerCase() === newName);\n//       };\n//       const { name } = values;\n//       const nameToRegistr = name.toLowerCase();\n//       if (findDuplicateName(contacts.items, nameToRegistr)) {\n//         Notiflix.Notify.info(`${name} is already in your contacts`);\n//         return;\n//       }\n\n//       dispatch(addContact(values));\n//       Notiflix.Notify.info(`${name} has been added to your contacts`);\n//       resetForm();\n//     },\n//   });\n\n//   return (\n//     <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"50vh\">\n//       <Box bg=\"white\" p={6} rounded=\"md\">\n//         <Formik onSubmit={formik.handleSubmit} validationSchema={schema}>\n//           <VStack spacing={4} align=\"flex-start\">\n//             <FormControl>\n//               <FormLabel htmlFor=\"name\">Name</FormLabel>\n//               <Input\n//                 id=\"name\"\n//                 name=\"name\"\n//                 placeholder=\"Enter name\"\n//                 type=\"name\"\n//                 variant=\"filled\"\n//                 onChange={formik.handleChange}\n//                 value={formik.values.name}\n//               />\n//             </FormControl>\n//             <FormControl>\n//               <FormLabel htmlFor=\"number\">Number</FormLabel>\n//               <Input\n//                 id=\"number\"\n//                 name=\"number\"\n//                 type=\"tel\"\n//                 placeholder=\"Enter phone\"\n//                 variant=\"filled\"\n//                 onChange={formik.handleChange}\n//                 value={formik.values.number}\n//               />\n//             </FormControl>\n\n//             <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n//               Add contact\n//             </Button>\n//           </VStack>\n//         </Formik>\n//       </Box>\n//     </Flex>\n//   );\n// }\n\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Formik } from 'formik';\n// import * as yup from 'yup';\n// // import { FormBook, Input, Label, Btn, Error } from './ContactEditor.styled';\n// import Notiflix from 'notiflix';\n// import { PhoneIcon } from '@chakra-ui/icons';\n\n// // import { selectContacts } from 'redux/contacts/selectors';\n// // import { useAddContactMutation } from './redux/contacts/contactsSlice';\n// import { addContact } from 'redux/contacts/operations';\n// import { selectContacts } from 'redux/contacts/selectors';\n\n// let schema = yup.object().shape({\n//   name: yup.string().required('Please, enter name'),\n//   number: yup.string().min(7).required('Please, enter correct number'),\n// });\n\n// const initialValues = {\n//   name: '',\n//   number: '',\n// };\n\n// export function ContactEditor() {\n//   const dispatch = useDispatch();\n//   const contacts = useSelector(selectContacts);\n//   // const [addContact] = useAddContactMutation();\n\n//   const handleAddContact = (values, { resetForm }) => {\n//     const findDuplicateName = (contact, newName) => {\n//       return contacts.find(({ name }) => name.toLowerCase() === newName);\n//     };\n\n//     const { name } = values;\n//     const nameToRegistr = name.toLowerCase();\n//     if (findDuplicateName(contacts.items, nameToRegistr)) {\n//       Notiflix.Notify.info(`${name} is already in your contacts`);\n//       return;\n//     }\n\n//     dispatch(addContact(values));\n//     resetForm();\n//   };\n\n//   return (\n//     <>\n//       <Formik\n//         initialValues={initialValues}\n//         onSubmit={handleAddContact}\n//         validationSchema={schema}\n//       >\n//         <FormBook autoComplete=\"off\">\n//           <Label>\n//             Name\n//             <Input\n//               type=\"text\"\n//               placeholder=\"Enter name\"\n//               name=\"name\"\n//               title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             />\n//             <Error name=\"name\" component=\"div\" />\n//           </Label>\n//           <Label>\n//             <PhoneIcon />\n//             <Input\n//               type=\"tel\"\n//               placeholder=\"Enter phone\"\n//               name=\"number\"\n//               title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             />\n//             <Error name=\"number\" component=\"div\" />\n//           </Label>\n\n//           <Btn type=\"submit\">Add contact</Btn>\n//         </FormBook>\n//       </Formik>\n//     </>\n//   );\n// }\n\n// export const ContactEditor = () => {\n//   const dispatch = useDispatch();\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     const form = e.currentTarget;\n//     const name = form.elements.name.value;\n//     const number = form.elements.number.value;\n//     if (name !== '' && number !== '') {\n//       dispatch(addContact(name, number));\n//       form.reset();\n//       return;\n//     }\n//     alert('Contact cannot be empty. Enter some text!');\n//   };\n\n//   return (\n//     <form className={css.form} onSubmit={handleSubmit}>\n//       <label>\n//         Name\n//         <input name=\"name\" className={css.input} />\n//       </label>\n//       <label>\n//         Phone\n//         <input name=\"number\" className={css.input} />\n//       </label>\n//       <button type=\"submit\" className={css.button}>\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// };\n","import { useSelector, useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Input } from '@chakra-ui/react';\nimport { Heading, Flex } from '@chakra-ui/react';\n\nexport function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onFilterChange = event => {\n    dispatch(updateFilter(event.currentTarget.value));\n  };\n  return (\n    <>\n      <Flex justifyContent=\"center\">\n        <Heading as=\"h2\" size=\"l\">\n          Find contacts\n        </Heading>\n      </Flex>\n      <Flex justifyContent=\"center\" paddingBottom=\"8px\" paddingTop=\"8px\">\n        <Input\n          width=\"auto\"\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Enter search name\"\n          value={filter}\n          onChange={onFilterChange}\n        />\n      </Flex>\n    </>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { ContactEditor } from '../components/ContactEditor/ContactEditor';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectIsLoading,\n  selectError,\n  selectContacts,\n} from 'redux/contacts/selectors';\nimport ContactList from 'components/ContactList';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\n\nimport { Filter } from 'components/Filter/Filter';\n\nimport { CircularProgress, Heading, Flex } from '@chakra-ui/react';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactEditor />\n\n      {contacts.length > 0 && (\n        <>\n          <Flex justifyContent=\"center\">\n            <Heading>Your Contacts</Heading>\n          </Flex>\n\n          <Filter />\n        </>\n      )}\n      <div>\n        {isLoading && (\n          <CircularProgress isIndeterminate color=\"green.300\" size=\"30px\" />\n        )}\n      </div>\n      <ContactList />\n      {error}\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","Contact","id","name","number","dispatch","useDispatch","colorScheme","type","onClick","deleteContact","w","h","ContactList","useSelector","visibleContacts","normFilter","toLowerCase","contact","includes","filteredContacts","justifyContent","gap","wrap","map","ContactEditor","bg","align","justify","p","rounded","initialValues","onSubmit","values","newName","resetForm","nameToRegistr","find","Notiflix","addContact","handleSubmit","errors","touched","spacing","isRequired","htmlFor","as","Input","variant","placeholder","isInvalid","width","Filter","size","paddingBottom","paddingTop","value","onChange","event","updateFilter","currentTarget","ContactsPage","useEffect","fetchContacts","length","isIndeterminate","color"],"sourceRoot":""}