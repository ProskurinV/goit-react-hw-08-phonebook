{"version":3,"file":"static/js/41.a16e40e5.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Contact/Contact.js","components/ContactList/ContactList.js","components/ContactEditor/ContactEditor.js","components/Filter/Filter.js","pages/ContactsPage.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import { DeleteIcon } from '@chakra-ui/icons';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport { Card, Text, CardBody, Button } from '@chakra-ui/react';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <Card>\n      <CardBody>\n        <Text>\n          {name} : {number}\n        </Text>\n        <Button colorScheme=\"blue\" type=\"button\" onClick={handleDelete}>\n          <DeleteIcon w={5} h={5} />\n        </Button>\n      </CardBody>\n    </Card>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { Contact } from 'components/Contact/Contact';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { Flex } from '@chakra-ui/react';\n\nexport default function ContactList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = () => {\n    const normFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name?.toLowerCase()?.includes(normFilter)\n    );\n  };\n  const visibleContacts = filteredContacts();\n\n  return (\n    <ul>\n      <Flex justifyContent=\"center\" gap=\"10px\" wrap=\"wrap\">\n        {visibleContacts.map(({ id, name, number }) => (\n          <li key={id}>\n            <Contact id={id} name={name} number={number} />\n          </li>\n        ))}\n      </Flex>\n    </ul>\n  );\n}\n","import { useFormik } from 'formik';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport * as yup from 'yup';\nimport Notiflix from 'notiflix';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\n\nlet schema = yup.object().shape({\n  name: yup.string().required('Please, enter name'),\n  number: yup.string().min(7).required('Please, enter correct number'),\n});\n\nexport function ContactEditor() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    onSubmit: (values, { resetForm }) => {\n      const findDuplicateName = (contact, newName) => {\n        return contacts.find(({ name }) => name.toLowerCase() === newName);\n      };\n      const { name } = values;\n      const nameToRegistr = name.toLowerCase();\n      if (findDuplicateName(contacts.items, nameToRegistr)) {\n        Notiflix.Notify.info(`${name} is already in your contacts`);\n        return;\n      }\n\n      dispatch(addContact(values));\n      resetForm();\n    },\n  });\n\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box bg=\"white\" p={6} rounded=\"md\">\n        <form onSubmit={formik.handleSubmit} validationSchema={schema}>\n          <VStack spacing={4} align=\"flex-start\">\n            <FormControl>\n              <FormLabel htmlFor=\"name\">Name</FormLabel>\n              <Input\n                id=\"name\"\n                name=\"name\"\n                placeholder=\"Enter name\"\n                type=\"name\"\n                variant=\"filled\"\n                onChange={formik.handleChange}\n                value={formik.values.name}\n              />\n            </FormControl>\n            <FormControl>\n              <FormLabel htmlFor=\"number\">Number</FormLabel>\n              <Input\n                id=\"number\"\n                name=\"number\"\n                type=\"tel\"\n                placeholder=\"Enter phone\"\n                variant=\"filled\"\n                onChange={formik.handleChange}\n                value={formik.values.number}\n              />\n            </FormControl>\n\n            <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n              Add contact\n            </Button>\n          </VStack>\n        </form>\n      </Box>\n    </Flex>\n  );\n}\n\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Formik } from 'formik';\n// import * as yup from 'yup';\n// // import { FormBook, Input, Label, Btn, Error } from './ContactEditor.styled';\n// import Notiflix from 'notiflix';\n// import { PhoneIcon } from '@chakra-ui/icons';\n\n// // import { selectContacts } from 'redux/contacts/selectors';\n// // import { useAddContactMutation } from './redux/contacts/contactsSlice';\n// import { addContact } from 'redux/contacts/operations';\n// import { selectContacts } from 'redux/contacts/selectors';\n\n// let schema = yup.object().shape({\n//   name: yup.string().required('Please, enter name'),\n//   number: yup.string().min(7).required('Please, enter correct number'),\n// });\n\n// const initialValues = {\n//   name: '',\n//   number: '',\n// };\n\n// export function ContactEditor() {\n//   const dispatch = useDispatch();\n//   const contacts = useSelector(selectContacts);\n//   // const [addContact] = useAddContactMutation();\n\n//   const handleAddContact = (values, { resetForm }) => {\n//     const findDuplicateName = (contact, newName) => {\n//       return contacts.find(({ name }) => name.toLowerCase() === newName);\n//     };\n\n//     const { name } = values;\n//     const nameToRegistr = name.toLowerCase();\n//     if (findDuplicateName(contacts.items, nameToRegistr)) {\n//       Notiflix.Notify.info(`${name} is already in your contacts`);\n//       return;\n//     }\n\n//     dispatch(addContact(values));\n//     resetForm();\n//   };\n\n//   return (\n//     <>\n//       <Formik\n//         initialValues={initialValues}\n//         onSubmit={handleAddContact}\n//         validationSchema={schema}\n//       >\n//         <FormBook autoComplete=\"off\">\n//           <Label>\n//             Name\n//             <Input\n//               type=\"text\"\n//               placeholder=\"Enter name\"\n//               name=\"name\"\n//               title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             />\n//             <Error name=\"name\" component=\"div\" />\n//           </Label>\n//           <Label>\n//             <PhoneIcon />\n//             <Input\n//               type=\"tel\"\n//               placeholder=\"Enter phone\"\n//               name=\"number\"\n//               title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             />\n//             <Error name=\"number\" component=\"div\" />\n//           </Label>\n\n//           <Btn type=\"submit\">Add contact</Btn>\n//         </FormBook>\n//       </Formik>\n//     </>\n//   );\n// }\n\n// export const ContactEditor = () => {\n//   const dispatch = useDispatch();\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     const form = e.currentTarget;\n//     const name = form.elements.name.value;\n//     const number = form.elements.number.value;\n//     if (name !== '' && number !== '') {\n//       dispatch(addContact(name, number));\n//       form.reset();\n//       return;\n//     }\n//     alert('Contact cannot be empty. Enter some text!');\n//   };\n\n//   return (\n//     <form className={css.form} onSubmit={handleSubmit}>\n//       <label>\n//         Name\n//         <input name=\"name\" className={css.input} />\n//       </label>\n//       <label>\n//         Phone\n//         <input name=\"number\" className={css.input} />\n//       </label>\n//       <button type=\"submit\" className={css.button}>\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// };\n","// import { FindWrapper, FindTitle, Input } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Input } from '@chakra-ui/react';\nimport { Heading, Flex } from '@chakra-ui/react';\n\nexport function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onFilterChange = event => {\n    dispatch(updateFilter(event.currentTarget.value));\n  };\n  return (\n    <>\n      <Flex justifyContent=\"center\">\n        <Heading as=\"h2\" size=\"l\">\n          Find contacts\n        </Heading>\n      </Flex>\n      <Flex justifyContent=\"center\">\n        <Input\n          width=\"auto\"\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Enter search name\"\n          value={filter}\n          onChange={onFilterChange}\n        />\n      </Flex>\n    </>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { ContactEditor } from '../components/ContactEditor/ContactEditor';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectIsLoading,\n  selectError,\n  selectContacts,\n} from 'redux/contacts/selectors';\n// import { Helmet } from 'react-helmet';\nimport ContactList from 'components/ContactList';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\n// import { Outlet, useNavigate } from 'react-router-dom';\n// import { useGetContactsQuery } from 'redux/contacts/contactsSlice';\nimport { Filter } from 'components/Filter/Filter';\n// import { Loader } from '../components/Spinner/Spinner';\n\nimport { CircularProgress, Heading, Flex } from '@chakra-ui/react';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactEditor />\n\n      {contacts.length > 0 && (\n        <>\n          <Flex justifyContent=\"center\">\n            <Heading>Your Contacts</Heading>\n          </Flex>\n\n          <Filter />\n        </>\n      )}\n      <div>\n        {isLoading && (\n          <CircularProgress isIndeterminate color=\"green.300\" size=\"30px\" />\n        )}\n      </div>\n      <ContactList />\n      {error}\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","Contact","id","name","number","dispatch","useDispatch","colorScheme","type","onClick","deleteContact","w","h","ContactList","useSelector","visibleContacts","normFilter","toLowerCase","contact","includes","filteredContacts","justifyContent","gap","wrap","map","schema","yup","shape","required","min","ContactEditor","formik","useFormik","initialValues","onSubmit","values","newName","resetForm","nameToRegistr","find","Notiflix","addContact","bg","align","justify","p","rounded","handleSubmit","validationSchema","spacing","htmlFor","placeholder","variant","onChange","handleChange","value","width","Filter","as","size","event","updateFilter","currentTarget","ContactsPage","useEffect","fetchContacts","length","isIndeterminate","color"],"sourceRoot":""}