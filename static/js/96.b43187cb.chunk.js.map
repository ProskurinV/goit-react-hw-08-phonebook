{"version":3,"file":"static/js/96.b43187cb.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.js","components/ContactList/ContactList.js","components/ContactEditor/ContactEditor.js","components/Filter/Filter.js","pages/ContactsPage.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Contact_wrapper__K-zLN\",\"name\":\"Contact_name__xbxVU\",\"number\":\"Contact_number__aT6T9\",\"button\":\"Contact_button__F+kJb\"};","import css from './Contact.module.css';\n// import { useDeleteContactMutation } from 'redux/contacts/contactsSlice';\nimport { DeleteIcon } from '@chakra-ui/icons';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nexport const Contact = ({ id, name, number }) => {\n  // const [deleteContact, { isLoading }] = useDeleteContactMutation();\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <div className={css.wrapper}>\n      <p className={css.name}>{name}</p>\n      <p className={css.number}>{number}</p>\n      <button\n        type=\"button\"\n        className={css.button}\n        onClick={handleDelete}\n        // disabled={isLoading}\n      >\n        <DeleteIcon w={5} h={5} />\n      </button>\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport css from './ContactList.module.css';\nimport { Contact } from 'components/Contact/Contact';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n// фільтр тут повинен бути\nexport default function ContactList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  // const normFilter = filter.value.toLowerCase();\n\n  const filteredContacts = () => {\n    const normFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name?.toLowerCase()?.includes(normFilter)\n    );\n  };\n  const visibleContacts = filteredContacts();\n\n  return (\n    <ul className={css.list}>\n      {visibleContacts.map(({ id, name, number }) => (\n        <li key={id}>\n          <Contact id={id} name={name} number={number} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\n// ContactList.propTypes = {\n//   title: PropTypes.string.isRequired,\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ),\n// };\n","import { useFormik } from 'formik';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport * as yup from 'yup';\nimport Notiflix from 'notiflix';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\n\nlet schema = yup.object().shape({\n  name: yup.string().required('Please, enter name'),\n  number: yup.string().min(7).required('Please, enter correct number'),\n});\n\nexport function ContactEditor() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    onSubmit: (values, { resetForm }) => {\n      const findDuplicateName = (contact, newName) => {\n        return contacts.find(({ name }) => name.toLowerCase() === newName);\n      };\n      const { name } = values;\n      const nameToRegistr = name.toLowerCase();\n      if (findDuplicateName(contacts.items, nameToRegistr)) {\n        Notiflix.Notify.info(`${name} is already in your contacts`);\n        return;\n      }\n\n      dispatch(addContact(values));\n      resetForm();\n    },\n  });\n\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box bg=\"white\" p={6} rounded=\"md\">\n        <form onSubmit={formik.handleSubmit} validationSchema={schema}>\n          <VStack spacing={4} align=\"flex-start\">\n            <FormControl>\n              <FormLabel htmlFor=\"name\">Name</FormLabel>\n              <Input\n                id=\"name\"\n                name=\"name\"\n                placeholder=\"Enter name\"\n                type=\"name\"\n                variant=\"filled\"\n                onChange={formik.handleChange}\n                value={formik.values.name}\n              />\n            </FormControl>\n            <FormControl>\n              <FormLabel htmlFor=\"number\">Number</FormLabel>\n              <Input\n                id=\"number\"\n                name=\"number\"\n                type=\"tel\"\n                placeholder=\"Enter phone\"\n                variant=\"filled\"\n                onChange={formik.handleChange}\n                value={formik.values.number}\n              />\n            </FormControl>\n\n            <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n              Add contact\n            </Button>\n          </VStack>\n        </form>\n      </Box>\n    </Flex>\n  );\n}\n\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Formik } from 'formik';\n// import * as yup from 'yup';\n// // import { FormBook, Input, Label, Btn, Error } from './ContactEditor.styled';\n// import Notiflix from 'notiflix';\n// import { PhoneIcon } from '@chakra-ui/icons';\n\n// // import { selectContacts } from 'redux/contacts/selectors';\n// // import { useAddContactMutation } from './redux/contacts/contactsSlice';\n// import { addContact } from 'redux/contacts/operations';\n// import { selectContacts } from 'redux/contacts/selectors';\n\n// let schema = yup.object().shape({\n//   name: yup.string().required('Please, enter name'),\n//   number: yup.string().min(7).required('Please, enter correct number'),\n// });\n\n// const initialValues = {\n//   name: '',\n//   number: '',\n// };\n\n// export function ContactEditor() {\n//   const dispatch = useDispatch();\n//   const contacts = useSelector(selectContacts);\n//   // const [addContact] = useAddContactMutation();\n\n//   const handleAddContact = (values, { resetForm }) => {\n//     const findDuplicateName = (contact, newName) => {\n//       return contacts.find(({ name }) => name.toLowerCase() === newName);\n//     };\n\n//     const { name } = values;\n//     const nameToRegistr = name.toLowerCase();\n//     if (findDuplicateName(contacts.items, nameToRegistr)) {\n//       Notiflix.Notify.info(`${name} is already in your contacts`);\n//       return;\n//     }\n\n//     dispatch(addContact(values));\n//     resetForm();\n//   };\n\n//   return (\n//     <>\n//       <Formik\n//         initialValues={initialValues}\n//         onSubmit={handleAddContact}\n//         validationSchema={schema}\n//       >\n//         <FormBook autoComplete=\"off\">\n//           <Label>\n//             Name\n//             <Input\n//               type=\"text\"\n//               placeholder=\"Enter name\"\n//               name=\"name\"\n//               title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             />\n//             <Error name=\"name\" component=\"div\" />\n//           </Label>\n//           <Label>\n//             <PhoneIcon />\n//             <Input\n//               type=\"tel\"\n//               placeholder=\"Enter phone\"\n//               name=\"number\"\n//               title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             />\n//             <Error name=\"number\" component=\"div\" />\n//           </Label>\n\n//           <Btn type=\"submit\">Add contact</Btn>\n//         </FormBook>\n//       </Formik>\n//     </>\n//   );\n// }\n\n// export const ContactEditor = () => {\n//   const dispatch = useDispatch();\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     const form = e.currentTarget;\n//     const name = form.elements.name.value;\n//     const number = form.elements.number.value;\n//     if (name !== '' && number !== '') {\n//       dispatch(addContact(name, number));\n//       form.reset();\n//       return;\n//     }\n//     alert('Contact cannot be empty. Enter some text!');\n//   };\n\n//   return (\n//     <form className={css.form} onSubmit={handleSubmit}>\n//       <label>\n//         Name\n//         <input name=\"name\" className={css.input} />\n//       </label>\n//       <label>\n//         Phone\n//         <input name=\"number\" className={css.input} />\n//       </label>\n//       <button type=\"submit\" className={css.button}>\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// };\n","// import { FindWrapper, FindTitle, Input } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Input } from '@chakra-ui/react';\nexport function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onFilterChange = event => {\n    dispatch(updateFilter(event.currentTarget.value));\n  };\n  return (\n    <>\n      <h2>Find contacts</h2>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Enter search name\"\n        value={filter}\n        onChange={onFilterChange}\n      />\n    </>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { ContactEditor } from '../components/ContactEditor/ContactEditor';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectIsLoading,\n  selectError,\n  selectContacts,\n} from 'redux/contacts/selectors';\n// import { Helmet } from 'react-helmet';\nimport ContactList from 'components/ContactList';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\n// import { Outlet, useNavigate } from 'react-router-dom';\n// import { useGetContactsQuery } from 'redux/contacts/contactsSlice';\nimport { Filter } from 'components/Filter/Filter';\n// import { Loader } from '../components/Spinner/Spinner';\n\nimport { CircularProgress } from '@chakra-ui/react';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {/* <h1>Phonebook</h1> */}\n      <ContactEditor />\n\n      {contacts.length > 0 && (\n        <>\n          <h2>Your Contacts</h2>\n          <Filter />\n        </>\n      )}\n      <div>\n        {isLoading && (\n          <CircularProgress isIndeterminate color=\"green.300\" size=\"30px\" />\n        )}\n      </div>\n      <ContactList />\n      {error}\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","Contact","id","name","number","dispatch","useDispatch","className","css","type","onClick","deleteContact","w","h","ContactList","useSelector","visibleContacts","normFilter","toLowerCase","contact","includes","filteredContacts","map","schema","yup","shape","required","min","ContactEditor","formik","useFormik","initialValues","onSubmit","values","newName","resetForm","nameToRegistr","find","Notiflix","addContact","bg","align","justify","p","rounded","handleSubmit","validationSchema","spacing","htmlFor","placeholder","variant","onChange","handleChange","value","colorScheme","width","Filter","event","updateFilter","currentTarget","ContactsPage","useEffect","fetchContacts","length","isIndeterminate","color","size"],"sourceRoot":""}