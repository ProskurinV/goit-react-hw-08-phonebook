{"version":3,"file":"static/js/960.3c805ec0.chunk.js","mappings":"6SAkBIA,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,MAAOF,EAAAA,KAAaE,QAAQC,SAAS,uBACrCC,SAAUJ,EAAAA,KAEPG,SAAS,yBACTE,IAAI,EAAG,sDACPC,QAAQ,WAAY,8CAGlB,SAASC,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAE1B,OACE,SAAC,KAAD,CAAMC,GAAG,WAAWC,MAAM,SAASC,QAAQ,SAASC,EAAE,QAAtD,UACE,UAAC,KAAD,CAAKH,GAAG,QAAQI,EAAG,EAAGC,QAAQ,KAA9B,WACE,SAAC,KAAD,CACEC,cAAe,CACbjB,MAAO,GACPE,SAAU,IAEZgB,iBAAkBrB,EAClBsB,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACnBf,GAASgB,EAAAA,EAAAA,IAAMF,IAEVZ,EAIHe,EAAAA,GAAAA,MAAA,iDAHAA,EAAAA,GAAAA,QAAA,kBACAF,IAIH,EAfH,SAiBG,gBAAGG,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,iBAAMP,SAAUK,EAAhB,UACE,UAAC,KAAD,CAAQG,QAAS,EAAGf,MAAM,aAA1B,WACE,UAAC,KAAD,CACEgB,YAAU,EACVC,YAAaJ,EAAOzB,OAAS0B,EAAQ1B,MAFvC,WAIE,SAAC,KAAD,CAAW8B,QAAQ,QAAnB,oBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,QAAQ,SACRC,YAAY,oBAGhB,UAAC,KAAD,CACET,YAAU,EACVC,YAAaJ,EAAOvB,UAAYwB,EAAQxB,SAF1C,WAIE,SAAC,KAAD,CAAW4B,QAAQ,WAAnB,uBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,WACHC,KAAK,WACLC,KAAK,WACLE,YAAY,iBACZD,QAAQ,YAEV,SAAC,KAAD,UAAmBX,EAAOvB,eAG5B,SAAC,KAAD,CAAQiC,KAAK,SAASG,YAAY,SAASC,MAAM,OAAjD,wBAjCL,KAyCH,SAAC,KAAD,QAIP,CC7Fc,SAASC,IACtB,OACE,iCACE,SAACC,EAAA,EAAD,WACE,wCAEF,SAACpC,EAAD,MAGL,C","sources":["components/LoginForm/LoginForm.js","pages/Login.js"],"sourcesContent":["import { Field, Formik } from 'formik';\nimport * as yup from 'yup';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\n\nimport toast, { Toaster } from 'react-hot-toast';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport { selectLogInError } from 'redux/auth/selectors';\n\nlet schema = yup.object().shape({\n  email: yup.string().email().required('Please, enter email'),\n  password: yup\n    .string()\n    .required('No password provided.')\n    .min(6, 'Password is too short - should be 6 chars minimum.')\n    .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.'),\n});\n\nexport function LoginForm() {\n  const dispatch = useDispatch();\n  const error = useSelector(selectLogInError);\n\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box bg=\"white\" p={6} rounded=\"md\">\n        <Formik\n          initialValues={{\n            email: '',\n            password: '',\n          }}\n          validationSchema={schema}\n          onSubmit={(values, { resetForm }) => {\n            dispatch(logIn(values));\n\n            if (!error) {\n              toast.success(`Log in success`);\n              resetForm();\n            } else {\n              toast.error(`Something went wrong, please check your data`);\n            }\n          }}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl\n                  isRequired\n                  isInvalid={!!errors.email && touched.email}\n                >\n                  <FormLabel htmlFor=\"email\">Email</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                    placeholder=\"Enter email\"\n                  />\n                </FormControl>\n                <FormControl\n                  isRequired\n                  isInvalid={!!errors.password && touched.password}\n                >\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter password\"\n                    variant=\"filled\"\n                  />\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                </FormControl>\n\n                <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                  Log In\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n\n        <Toaster />\n      </Box>\n    </Flex>\n  );\n}\n","import { Helmet } from 'react-helmet';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </>\n  );\n}\n"],"names":["schema","yup","shape","email","required","password","min","matches","LoginForm","dispatch","useDispatch","error","useSelector","selectLogInError","bg","align","justify","h","p","rounded","initialValues","validationSchema","onSubmit","values","resetForm","logIn","toast","handleSubmit","errors","touched","spacing","isRequired","isInvalid","htmlFor","as","Input","id","name","type","variant","placeholder","colorScheme","width","Login","Helmet"],"sourceRoot":""}