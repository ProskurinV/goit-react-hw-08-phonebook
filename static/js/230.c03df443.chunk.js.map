{"version":3,"file":"static/js/230.c03df443.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.js","components/ContactList/ContactList.js","components/ContactEditor/ContactEditor.styled.js","components/ContactEditor/ContactEditor.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/Spinner/Spinner.js","pages/ContactsPage.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Contact_wrapper__K-zLN\",\"name\":\"Contact_name__xbxVU\",\"number\":\"Contact_number__aT6T9\",\"button\":\"Contact_button__F+kJb\"};","import css from './Contact.module.css';\n// import { useDeleteContactMutation } from 'redux/contacts/contactsSlice';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nexport const Contact = ({ id, name, number }) => {\n  // const [deleteContact, { isLoading }] = useDeleteContactMutation();\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <div className={css.wrapper}>\n      <p className={css.name}>{name}</p>\n      <p className={css.number}>{number}</p>\n      <button\n        type=\"button\"\n        className={css.button}\n        onClick={handleDelete}\n        // disabled={isLoading}\n      >\n        Delete\n      </button>\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport css from './ContactList.module.css';\nimport { Contact } from 'components/Contact/Contact';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n// фільтр тут повинен бути\nexport default function ContactList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  // const normFilter = filter.value.toLowerCase();\n\n  const filteredContacts = () => {\n    const normFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name?.toLowerCase()?.includes(normFilter)\n    );\n  };\n  const visibleContacts = filteredContacts();\n\n  return (\n    <ul className={css.list}>\n      {visibleContacts.map(({ id, name, number }) => (\n        <li key={id}>\n          <Contact id={id} name={name} number={number} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\n// ContactList.propTypes = {\n//   title: PropTypes.string.isRequired,\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ),\n// };\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormBook = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 10px;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: large;\n  font-weight: 500;\n`;\n\nexport const Input = styled(Field)`\n  margin-top: 10px;\n  border: 1px solid #cccccc;\n  border-radius: 4px;\n  outline: none;\n  height: 30px;\n`;\n\nexport const Btn = styled.button`\n  /* display: flex; */\n\n  margin-top: 10px;\n  cursor: pointer;\n  padding: 5px;\n  border-radius: 4px;\n  background-color: #fff;\n\n  &:hover,\n  &:focus {\n    background-color: #05c3dd;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n  margin-top: 5px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { FormBook, Input, Label, Btn, Error } from './ContactEditor.styled';\nimport Notiflix from 'notiflix';\n// import { selectContacts } from 'redux/contacts/selectors';\n// import { useAddContactMutation } from './redux/contacts/contactsSlice';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nlet schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Please, enter name'),\n  number: yup\n    .string()\n    .min(7)\n    .max(12)\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Please, enter correct number'),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport function ContactEditor() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  // const [addContact] = useAddContactMutation();\n\n  const handleAddContact = (values, { resetForm }) => {\n    const findDuplicateName = (contact, newName) => {\n      return contacts.find(({ name }) => name.toLowerCase() === newName);\n    };\n\n    const { name } = values;\n    const nameToRegistr = name.toLowerCase();\n    if (findDuplicateName(contacts.items, nameToRegistr)) {\n      Notiflix.Notify.info(`${name} is already in your contacts`);\n      return;\n    }\n\n    dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleAddContact}\n        validationSchema={schema}\n      >\n        <FormBook autoComplete=\"off\">\n          <Label>\n            Name\n            <Input\n              type=\"text\"\n              placeholder=\"Enter name\"\n              name=\"name\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            />\n            <Error name=\"name\" component=\"div\" />\n          </Label>\n          <Label>\n            Number\n            <Input\n              type=\"tel\"\n              placeholder=\"Enter phone\"\n              name=\"number\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            />\n            <Error name=\"number\" component=\"div\" />\n          </Label>\n\n          <Btn type=\"submit\">Add contact</Btn>\n        </FormBook>\n      </Formik>\n    </>\n  );\n}\n\n// export const ContactEditor = () => {\n//   const dispatch = useDispatch();\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     const form = e.currentTarget;\n//     const name = form.elements.name.value;\n//     const number = form.elements.number.value;\n//     if (name !== '' && number !== '') {\n//       dispatch(addContact(name, number));\n//       form.reset();\n//       return;\n//     }\n//     alert('Contact cannot be empty. Enter some text!');\n//   };\n\n//   return (\n//     <form className={css.form} onSubmit={handleSubmit}>\n//       <label>\n//         Name\n//         <input name=\"name\" className={css.input} />\n//       </label>\n//       <label>\n//         Phone\n//         <input name=\"number\" className={css.input} />\n//       </label>\n//       <button type=\"submit\" className={css.button}>\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// };\n","import styled from 'styled-components';\n\nexport const FindWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 10px;\n  padding-bottom: 10px;\n`;\n\nexport const FindTitle = styled.h3`\n  margin-left: auto;\n  margin-right: auto;\n\n  font-size: x-large;\n  font-weight: 700;\n  text-align: center;\n`;\n\nexport const Input = styled.input`\n  margin-top: 10px;\n  border: 1px solid #cccccc;\n  border-radius: 4px;\n  outline: none;\n  height: 30px;\n`;\n","import { FindWrapper, FindTitle, Input } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onFilterChange = event => {\n    dispatch(updateFilter(event.currentTarget.value));\n  };\n  return (\n    <FindWrapper>\n      <FindTitle>Find contacts</FindTitle>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Enter search name\"\n        value={filter}\n        onChange={onFilterChange}\n      />\n    </FindWrapper>\n  );\n}\n","import Spinner from 'react-bootstrap/Spinner';\n\nexport function Loader() {\n  return (\n    <Spinner animation=\"border\" role=\"status\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  );\n}\n\nexport default Loader;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { ContactEditor } from '../components/ContactEditor/ContactEditor';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectIsLoading,\n  selectError,\n  selectContacts,\n} from 'redux/contacts/selectors';\n// import { Helmet } from 'react-helmet';\nimport ContactList from 'components/ContactList';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\n// import { Outlet, useNavigate } from 'react-router-dom';\n// import { useGetContactsQuery } from 'redux/contacts/contactsSlice';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from '../components/Spinner/Spinner';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactEditor />\n\n      {contacts.length > 0 && (\n        <>\n          <h2>Your Contacts</h2>\n          <Filter />\n        </>\n      )}\n      <div>{isLoading && <Loader />}</div>\n      <ContactList />\n      {error}\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","Contact","id","name","number","dispatch","useDispatch","className","css","type","onClick","deleteContact","ContactList","useSelector","visibleContacts","normFilter","toLowerCase","contact","includes","filteredContacts","map","FormBook","styled","Form","Label","Input","Field","Btn","Error","ErrorMessage","schema","yup","shape","matches","required","min","max","initialValues","ContactEditor","onSubmit","values","newName","resetForm","nameToRegistr","find","Notiflix","addContact","validationSchema","autoComplete","placeholder","title","component","FindWrapper","FindTitle","Filter","value","onChange","event","updateFilter","currentTarget","Loader","Spinner","animation","role","ContactsPage","useEffect","fetchContacts","length"],"sourceRoot":""}