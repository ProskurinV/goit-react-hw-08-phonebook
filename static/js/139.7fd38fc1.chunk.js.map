{"version":3,"file":"static/js/139.7fd38fc1.chunk.js","mappings":"0RAoBIA,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,KAAMF,EAAAA,KAAaG,IAAI,GAAGC,IAAI,IAAIC,WAClCC,MAAON,EAAAA,KAAaM,QAAQD,WAC5BE,SAAUP,EAAAA,KAAaK,WAAWF,IAAI,KASjC,SAASK,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbX,KAAM,GACNI,MAAO,GACPC,SAAU,IAEZO,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACnBP,GAASQ,EAAAA,EAAAA,IAASF,IAClBC,GACD,IAGH,OACE,SAAC,KAAD,CAAME,GAAG,WAAWC,MAAM,SAASC,QAAQ,SAASC,EAAE,QAAtD,UACE,SAAC,KAAD,CAAKH,GAAG,QAAQI,EAAG,EAAGC,QAAQ,KAA9B,UACE,iBAAMT,SAAUH,EAAOa,aAAcC,iBAAkB1B,EAAvD,UACE,UAAC,KAAD,CAAQ2B,QAAS,EAAGP,MAAM,aAA1B,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAWQ,QAAQ,OAAnB,mBACA,SAAC,KAAD,CACEC,GAAG,OACH1B,KAAK,OACL2B,YAAY,aACZC,KAAK,OACLC,QAAQ,SACRC,SAAUrB,EAAOsB,aACjBC,MAAOvB,EAAOI,OAAOb,WAGzB,UAAC,KAAD,YACE,SAAC,KAAD,CAAWyB,QAAQ,QAAnB,oBACA,SAAC,KAAD,CACEC,GAAG,QACH1B,KAAK,QACL4B,KAAK,QACLD,YAAY,cACZE,QAAQ,SACRC,SAAUrB,EAAOsB,aACjBC,MAAOvB,EAAOI,OAAOT,YAGzB,UAAC,KAAD,YACE,SAAC,KAAD,CAAWqB,QAAQ,WAAnB,uBACA,SAAC,KAAD,CACEC,GAAG,WACH1B,KAAK,WACL4B,KAAK,WACLD,YAAY,iBACZE,QAAQ,SACRC,SAAUrB,EAAOsB,aACjBC,MAAOvB,EAAOI,OAAOR,eAIzB,SAAC,KAAD,CAAQuB,KAAK,SAASK,YAAY,SAASC,MAAM,OAAjD,8BAQX,CC7Fc,SAASC,IACtB,OACE,4BACE,SAACC,EAAA,EAAD,WACE,+CAEF,SAAC9B,EAAD,MAGL,C","sources":["components/RegisterForm/RegisterForm.js","pages/Register.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n// import { EmailIcon } from '@chakra-ui/icons';\n\n// import { Formik } from 'formik';\nimport { useFormik } from 'formik';\n\nimport * as yup from 'yup';\n// import { FormBook, Input, Label, Btn, Error } from './RegisterForm.styled';\n// import css from './RegisterForm.module.css';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\n\nlet schema = yup.object().shape({\n  name: yup.string().min(3).max(30).required(),\n  email: yup.string().email().required(),\n  password: yup.string().required().min(7),\n});\n\n// const initialValues = {\n//   name: '',\n//   email: '',\n//   password: '',\n// };\n\nexport function RegisterForm() {\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    onSubmit: (values, { resetForm }) => {\n      dispatch(register(values));\n      resetForm();\n    },\n  });\n\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box bg=\"white\" p={6} rounded=\"md\">\n        <form onSubmit={formik.handleSubmit} validationSchema={schema}>\n          <VStack spacing={4} align=\"flex-start\">\n            <FormControl>\n              <FormLabel htmlFor=\"name\">Name</FormLabel>\n              <Input\n                id=\"name\"\n                name=\"name\"\n                placeholder=\"Enter name\"\n                type=\"name\"\n                variant=\"filled\"\n                onChange={formik.handleChange}\n                value={formik.values.name}\n              />\n            </FormControl>\n            <FormControl>\n              <FormLabel htmlFor=\"email\">Email</FormLabel>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"Enter email\"\n                variant=\"filled\"\n                onChange={formik.handleChange}\n                value={formik.values.email}\n              />\n            </FormControl>\n            <FormControl>\n              <FormLabel htmlFor=\"password\">Password</FormLabel>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Enter password\"\n                variant=\"filled\"\n                onChange={formik.handleChange}\n                value={formik.values.password}\n              />\n            </FormControl>\n\n            <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n              Register\n            </Button>\n          </VStack>\n        </form>\n      </Box>\n    </Flex>\n  );\n}\n\n// export function RegisterForm() {\n//   const dispatch = useDispatch();\n\n//   const handleSubmit = (values, { resetForm }) => {\n//     dispatch(register(values));\n//     resetForm();\n//   };\n\n//   return (\n//     <>\n//       <Formik\n//         initialValues={initialValues}\n//         onSubmit={handleSubmit}\n//         validationSchema={schema}\n//       >\n//         <FormBook autoComplete=\"off\">\n//           <Label>\n//             Name\n//             <Input\n//               type=\"text\"\n//               placeholder=\"Enter name\"\n//               name=\"name\"\n//               title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             />\n//             <Error name=\"name\" component=\"div\" />\n//           </Label>\n//           <Label>\n//             <EmailIcon />\n//             <Input type=\"text\" placeholder=\"Enter email\" name=\"email\" />\n//             <Error name=\"email\" component=\"div\" />\n//           </Label>\n//           <Label>\n//             Password\n//             <Input\n//               type=\"password\"\n//               placeholder=\"Enter password\"\n//               name=\"password\"\n//             />\n//             <Error name=\"password\" component=\"div\" />\n//           </Label>\n\n//           <Btn type=\"submit\">Register</Btn>\n//         </FormBook>\n//       </Formik>\n//     </>\n//   );\n// }\n\n// export const RegisterForm = () => {\n//   const dispatch = useDispatch();\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     const form = e.currentTarget;\n//     dispatch(\n//       register({\n//         name: form.elements.name.value,\n//         email: form.elements.email.value,\n//         password: form.elements.password.value,\n//       })\n//     );\n//     form.reset();\n//   };\n\n//   return (\n//     <form className={css.form} onSubmit={handleSubmit} autoComplete=\"off\">\n//       <label className={css.label}>\n//         Username\n//         <input type=\"text\" name=\"name\" />\n//       </label>\n//       <label className={css.label}>\n//         Email\n//         <input type=\"email\" name=\"email\" />\n//       </label>\n//       <label className={css.label}>\n//         Password\n//         <input type=\"password\" name=\"password\" />\n//       </label>\n//       <button type=\"submit\">Register</button>\n//     </form>\n//   );\n// };\n","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from '../components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["schema","yup","shape","name","min","max","required","email","password","RegisterForm","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","resetForm","register","bg","align","justify","h","p","rounded","handleSubmit","validationSchema","spacing","htmlFor","id","placeholder","type","variant","onChange","handleChange","value","colorScheme","width","Register","Helmet"],"sourceRoot":""}